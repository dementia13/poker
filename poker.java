/*
 * Copyright 2017 Sean R Quinn

Redistribution and use in source and binary forms, with or without 
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, 
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, 
this list of conditions and the following disclaimer in the documentation 
and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND 
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE 
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR S
ERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER 
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package poker;

import java.util.Arrays;
import java.util.Random;

/**
 *
 * @author Sean Quinn
 * sean@dementia13.net
 * 
 * 
|   Description: Simulates a deck of cards. Generates a 52-card deck 
|	and a shuffled version of that deck. Deals five cards to each of a
|	user-specified number of players, from 1 to 7. Prints the resulting
|	dealt hands and evaluates them, displaying the highest-ranked hand
|	as the winner. A test function tests pre-made hands to ensure that
|	all combinations are properly evaluated.
|
|	Input:  User selects a number of players, 1-7
|
|	Output: Prints the original deck, the shuffled deck, and each 
|		hand dealt. Displays the winning hand. Displays rankings of 
|		pre-set hands.
|
|	Process: A card is represented by a structure that contains an ID
|		number for each card along with integer and string values 
|		that represent the card's rank and suit. A deck is an
|		array of 52 cards that is generated by a counter loop.
|		The counter value becomes the ID of each card, and the ID
|		determines the rank value, counting upward from 1 (ace) to
|		13 (king). Each division of 13 values becomes a suit, 
|		assigned alphabetically.
* 
*               This was written in C, where the number of players was 
*               specified at the command line and all output was textual.
*               Java port takes advantage of graphical display, as well as 
*               numerous language conveniences. Code has been updated to 
*               conform to standard Java nomenclature.
|
|   *========================================================================
 */
public class poker {
    
    // -- CONSTANTS ------------------------------------------------------------
    
    static public enum Suits {NULL, CLUBS, DIAMONDS, HEARTS, SPADES}
    static public enum Ranks {NULL, ACE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, 
        NINE, TEN, JACK, QUEEN, KING}
    Ranks RANK;
    Suits SUIT;
    
    
    static final int DECK_SIZE = 53;	/* number of cards in deck */
    static int NUM_HANDS = 5;
    static final int NUM_RANKS = 13;	/* number of ranks in a suit */
    static final int MAX_SUITNAME = 9;	/* longest suit name, "diamonds" + EOS */
    static final int MAX_RANKNAME = 6;	/* longest rank name + EOS */
    static final int CARD_INIT = 1;	/* initialize counting loops */
    static final int ZERO = 0;	
    static final int MAX_RANK = 13;	/* value of highest rank (king) */
    static final int MAX_SUIT = 4;         /* suits numbered 1-4 */
    static final int CPH = 5;              /* cards per hand fixed at 5 */
    static final int MIN_PLYRS = 1;
    static final int MAX_PLYRS = 7;
    static final int TRUE = 0;
    static final int FALSE = 1;
    static final int HIGH_ACE = 14;
    
/* The folowing constants give the base rank scores used in calculating
 * 	winners. Listed in ascending order of value: */
    static final int  PAIR_BASE = 430168;	
    static final int  TWO_PAIR_BASE = 30743;				
    static final int  THREE_KIND_BASE = 2545;	
    static final int  STRAIGHT_BASE = 2545;		
    static final int  FLUSH_BASE = 10;
    static final int  FULL_HOUSE_BASE = 430168;	
    static final int  FOUR_KIND_BASE = 183;
    static final int  STRAIGHT_FLUSH_BASE = 183;

    // -- CLASS DEFINITIONS ----------------------------------------------------
    
    static public class Card{
	int iDNum = 0;
	int suit = 0;
	int rank = 0;
	String suitName = "";
	String rankName = "";
    }
    
    static public class Deck{
        Card[] deck = new Card[DECK_SIZE];
    }
    
    static public class Hand{
        int handID = 0;
        long score = 0;
        Card[] hand = new Card[CPH + CARD_INIT];
        
        Hand(){}
        
        Hand(int handID, long score, Card[] hand){}
    }
    

    // -- 
    
    /*----------------- assignCard  ----------------------------------------------
 * function assignCard(int iD) 
 *
 * Purpose: Receives an int that represents a card in a deck, assigns the
 * 	rank and suit both as an integer and as a string value 
 *
 * @param - int iD - identifier, an int 1-52 that represents the card 
 *
 * @return Card - the complete structure representing a single card 
 *
-----------------------------------------------------------------------------*/
    Card assignCard(int iD){
	Card newCard = new Card();
	String suitName = "";
	String rankName = "";
	newCard.iDNum = iD;
        newCard.suit = getSuit(iD);
        newCard.rank = getRank(iD);
        newCard.suitName = getSuitName(newCard.suit);
        newCard.rankName = getRankName(newCard.rank);	
	return newCard;
    } 
    
/*----------------- createDeck ----------------------------------------------
 * function createDeck(Deck newDeck)
 *
 * Purpose: Generates a deck of cards. This is nothing special- it's just
 * 	a counting loop. Rank and suit assigned by division in separate
 *      functions getRank and getSuit
 *
 * @param - Deck newDeck - array of type Card. Elements are populated by
 * 	iterating the array. 
 *
 * @return Deck- the generated Deck
 *
-----------------------------------------------------------------------------*/
    static Deck createDeck(){
        Deck newDeck = new Deck();

	for (int iD = CARD_INIT; iD < DECK_SIZE; iD++){
            Card newCard = new Card();
		newCard.iDNum = iD;
		newCard.suit = getSuit(iD);
		newCard.rank = getRank(iD);
		newCard.suitName = getSuitName(newCard.suit);
		newCard.rankName = getRankName(newCard.rank);
                newDeck.deck[iD] = newCard; 
	} 
	return newDeck;
    }
    
    // -- FUNCTIONS FOR DEALING CARDS ------------------------------------------
    
/*----------------- dealHands --------------------------------------------------
 * function dealHands(int, Deck, Hand[]) 
 *
 * Purpose: Distributes cards from a generated deck to a user-specified
 *          number of players. Each Hand is dealt in a separate function
 *          and the array is assembled and returned here
 *      
 * Procedure: Iterates through array of hands. Each pass through loop 
 *          calls dealOneHand, which generates and returns the new Hand.
 *            
 *
 * @param - int NUM_HANDS - a user-specified number of players
 * 	   Deck sDeck - the (shuffled) deck to be dealt
 * 	   Hand aHands[] - array of all hands in the game 
 *
 * @return aHands[] - returns array of dealt Hands
 *
-----------------------------------------------------------------------------*/
    static Hand[] dealHands(Deck sDeck, 
		Hand[] aHands){
	int handCount = CARD_INIT;
	int deckCount = CARD_INIT;

	/* These are to be passed to the function that deals the
 		individual hands. */ 
        
        // loop that calls the dealing function
	for (int gameCount = CARD_INIT; gameCount <= NUM_HANDS; gameCount++){
            int nextCard = gameCount;               // First card to be dealt 
            Hand newHand = new Hand();
            newHand.handID = gameCount;	
            for(int cardCount = CARD_INIT; cardCount <= CPH; cardCount++){
		newHand.hand[cardCount] = sDeck.deck[nextCard];
		nextCard += NUM_HANDS;
            }
            textDisplayHand(newHand);
            newHand = Score.sortHand(newHand);
            newHand.score = Score.getScore(newHand);
            aHands[gameCount] = newHand;

            /* reset deal counters */
            //nextCard++;              
            deckCount += CPH;	/* Tracks how many cards
                    have been dealt from deck. It was already 
                    validated that there will not be more hands
                    dealt than cards in the deck, but this is
                    an extra safeguard. */
	}
	if(deckCount >= DECK_SIZE){
		throw new IllegalArgumentException("Programming error: "
                        + "all cards dealt.");
	}
	return aHands;
    }

/*----------------- getRank -------------------------------------------------
 * function getRank(int iD)
 *
 * Purpose: Returns an int used to represent the rank value of a Card.
 * 	Simply returns the modulo of the id# of the card in the deck 
 * 	divided by the number of ranks (13). The highest card then has
 * 	modulo 0, so 13 is added to maintain its position.	
 *
 * @param int(iD) - 1-52 id number of a card in a deck. That's 4 groups
 * 	of 13 ranks, so each number 1-13 represents a rank. 
 *
 * @return int- 1-10 represent the numbered ranks, 11 is "jack",
 * 	12 is "queen" and 13 is "king".
 *
-----------------------------------------------------------------------------*/
    static int getRank(int iD){
	int rank;
	rank = (iD % NUM_RANKS);
	if (rank == ZERO){
		return 13;      // value of KING
	}
	return rank;
    }

/*----------------- getRankName -------------------------------------------
 * function getRankName(int rankID) 
 *
 * Purpose: Receives an int, 1-13, that represents the rank of the card.
 * 	A switch statement selects the rank name, which is returned. An
 *      IllegalArgumentException is thrown should an invalid value pass.
 *
 * @param int rankID - The integer value of the card's rank. 
 *
 * @return String rankName - The string name of the card's rank. 
-----------------------------------------------------------------------------*/
    static String getRankName(int rankID){
        String rankName = "";
        switch(rankID){
        case 1:
                rankName = "Ace";
                break;
        case 2:
                rankName = "Two";
                break;
        case 3:
                rankName = "Three";
                break;
        case 4:
                rankName = "Four";
                break;
        case 5: 
                rankName = "Five"; 
                break;
        case 6:
                rankName = "Six";
                break;
        case 7:
                rankName = "Seven";
                break;
        case 8:
                rankName = "Eight";
                break;
        case 9:
                rankName = "Nine";
                break;
        case 10:
                rankName = "Ten";
                break;
        case 11:
                rankName = "Jack";
                break;
        case 12:
                rankName = "Queen";
                break;
        case 13:
                rankName = "King";
                break;
        default:
                throw new IllegalArgumentException("Invalid rank assignment.");
        }
        return rankName;
    }
    
/*----------------- getSuit -------------------------------------------------
 * function getSuit(int iD)
 *
 * Purpose: Returns an int used to represent the suit value of a struct card.
 * 	Uses a homemade ceiling function to return a number 1-4.  
 *
 * @param int(i_d) - 1-52 id number of a card in a deck. Each set of 13
 * 	numbers represents a single suit. 
 *
 * @return int- 1 = "clubs", 2 = "diamonds", 3 = "hearts", 4 = "clovers".
 * 	No, wait, 4 = "spades" 
 *
-----------------------------------------------------------------------------*/
    static int getSuit(int iD){
	int suit;
	suit = iD / NUM_RANKS;
	if ((iD % NUM_RANKS) == 0){	 
		return suit;	 
	}
	else
		return suit + 1; 
    }
    
/*----------------- getSuitName -------------------------------------------
 * function getSuitName
 *
 * Purpose: retrieves the string value associated with the card suit 
 *
 * @param - int suit - integer value 1-4 
 *
 * @return - none. Value is returned by pointer manipulation. 
 *
-----------------------------------------------------------------------------*/
static String getSuitName(int suit){
    String suitName = "";
    switch (suit){
    case 1: 
            suitName = "clubs";
            break;
    case 2:
            suitName = "diamonds";
            break;
    case 3:
            suitName = "hearts";
            break;
    case 4:
            suitName = "spades";
            break;
    default:
            throw new IllegalArgumentException("Invalid suit assignment");
    }
    return suitName;
}
/*----------------- getWinner ------------------------------------------------
 * function getWinner 
 *
 * Purpose: Finds the highest score of the hands 
 *
 * @param - Hand[] - all Hands
 * 	int num_hands - number of players
 *
 * @return - int - ID# of the winning hand 
 *
-----------------------------------------------------------------------------*/

    static int getWinner(Hand allHands[]){
	long highScore = 0;
	int winner = 0;
	for (int handex = CARD_INIT; handex <= NUM_HANDS; handex++){
		if (allHands[handex].score > highScore){
			highScore = allHands[handex].score;
			winner = allHands[handex].handID;
		}	
	}
	return winner;
    }

/*----------------- shuffleDeck ---------------------------------------------
 * function shuffleDeck(Deck origDeck)
 *
 * Purpose: Is passed a previously generated deck of cards, shuffles it,
 *      and returns it
 * 	Implements the Fisher-Yates shuffle as referenced at webpage
 * 	https://en.wikipedia.org/wiki/
 *		Fisher%E2%80%93Yates_shuffle#The_modern_algorithm
 *      Counts down from the highest-value card in the deck, and swaps that 
 *      with a card from a random position
 *
 * @param Deck(origDeck) - previously generated deck
 *
 * @return Card* - pointer to the first array element of shuffled deck 
 *
-----------------------------------------------------------------------------*/
    static Deck shuffleDeck(Deck origDeck){
        Deck sDeck = origDeck;
        Random randm = new Random(System.nanoTime());
        int randInt = 0;
	Card temp = new Card();
	for (int sIndex = DECK_SIZE; sIndex > CARD_INIT; ){
		--sIndex;
		randInt = randm.nextInt(sIndex);
		if(randInt == ZERO){
			randInt = CARD_INIT;    // there is no "zero" card, set
		}                               // it to 1
		temp = sDeck.deck[randInt];	
		sDeck.deck[randInt] = sDeck.deck[sIndex];
		sDeck.deck[sIndex]  = temp;
	}
	return sDeck;
    }
    
    // -- DISPLAY FUNCTIONS (TEXT/COMMAND LINE VERSIONS) -----------------------
    
/*----------------- textDisplayAllHands ----------------------------------------
 * function displayAllHands(int, Hand[])
 *
 * Purpose: Prints all hands in the game by calling function
 * 	to display single hand
 *
 * @param - int num_hands - user-selected number of players
 * 	   Hand allHands[] - array of all Hands in play 
 *
 * @return none. Is a print function.
-----------------------------------------------------------------------------*/
    static void textDisplayAllHands(Hand[] allHands){
	for (int handCount = CARD_INIT; handCount <= NUM_HANDS; handCount++){
            // System.out.println("Displaying hand #" + handCount + ":");
            textDisplayHand(allHands[handCount]);
	}
	return;
    }
			
/*----------------- textDisplayCard ----------------------------------------------
 * function textDisplayCard(Card dispCard)
 *
 * Purpose: Displays a card from the deck, formatted for command-line output 
 *
 * @param struct card dispCard - a card, that's all
 *
 * @return none. Is a print function.
-----------------------------------------------------------------------------*/
    static void textDisplayCard(Card dispCard){
	System.out.println(dispCard.rankName + " of " + dispCard.suitName);
    }

/*----------------- textDisplayDeck ---------------------------------------------
 * function textDisplayDeck(Deck showDeck)
 *
 * Purpose: Is passed a deck of cards. Prints the contents of the current 
 *      (possibly shuffled and/or dealt-from) deck. Is the print function
 *      from the original command-line version of this program
 *
 * @param Deck showDeck - Deck to be displayed
 *
 * @return none. Is a print function.
-----------------------------------------------------------------------------*/
    static void textDisplayDeck(Deck showDeck){
        System.out.println("Displaying deck: ");
	for (int deckIndex = CARD_INIT; deckIndex < DECK_SIZE; deckIndex++){
		textDisplayCard(showDeck.deck[deckIndex]);
	}
    }

/*----------------- textDisplayHand ---------------------------------------------
 * function textDisplayHand(Hand)
 *
 * Purpose: Displays a single hand from the Deck, formatted for command line
 *
 * @param Hand showHand - Hand to be displayed 
 *
 * @return none. Is a print function.
-----------------------------------------------------------------------------*/
    static void textDisplayHand(Hand showHand){
	System.out.println("Hand #" + showHand.handID + ":");
	for(int index = CARD_INIT; index <= CPH; index++){
		textDisplayCard(showHand.hand[index]);
	}
        System.out.println();
    }
    
    // -- GUI -----------------------------------------------------------------
    
    static void createAndShowGUI(){
    
    }
    
    
/*----------------- textValidate -------------------------------------------------
 * function textValidate() 
 *
 * Purpose: Verifies that user input is within proper boundaries:
 * 	- the number of players must be between 1-7. Values outside this range 
 * 	  display an error.
 *
 * @param - receives no parameters: validates the constant NUM_HANDS
 *
 * @return - boolean, true if NUM_HANDS is within the proper range
 *
-----------------------------------------------------------------------------*/
    boolean textValidate(){
	if ((NUM_HANDS < MIN_PLYRS) || (NUM_HANDS > MAX_PLYRS)){
            System.out.print("Improper input. Enter a number of players ");
            System.out.print("between " + MIN_PLYRS);
            System.out.println(" and " + MAX_PLYRS + ".");
            return false;
	}
        else
            return true;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {

        poker.createAndShowGUI();

	Hand allCards = new Hand();
	Hand[] allHands = new Hand[NUM_HANDS + CARD_INIT];
        
	/* create deck */
        //System.out.println("Creating deck.");
	Deck originalDeck = createDeck();
        //System.out.println("Displaying original deck.");
	//textDisplayDeck(originalDeck);

	/* shuffle deck */
        //System.out.println("Shuffling deck: ");
	Deck shuffledDeck = shuffleDeck(originalDeck);
	//textDisplayDeck(shuffledDeck);	

	/* deal hands */	
        
	allHands = dealHands(shuffledDeck, allHands); 

	textDisplayAllHands(allHands);
	System.out.println("The winning hand is number " 
                + getWinner(allHands));


    }
    
}
